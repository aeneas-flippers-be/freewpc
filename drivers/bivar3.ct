/*
 * written by Aeneas Verhe and based on previous work in bivar2.ct by James Cardona 
 *
 * Driver for a bidirectional motor with two switches as used in head of bigfoot. 
 * One solenoid is enable motor. Other solenoid is to turn direction cw/ccw while it's enabled by first coil.
 * Head can rotate clockwise and counterclockwise. Position switches to look to front or back of playfield. 
 * Head can also continue turning in both directions until stop command is given.
 */

@@class bivar3
@@parameter dir_sol
@@parameter enable_sol
@@parameter back_sw
@@parameter front_sw



@@
@@file @self.sched
@@
!@self_service		4		20c



@@
@@file @self.h
@@

#include <freewpc.h>

typedef enum {
	@SELF_IDLE,
	@SELF_CW_TO_FRONT,
	@SELF_CW_TO_BACK,
	@SELF_CW,
	@SELF_CCW_TO_FRONT,
	@SELF_CCW_TO_BACK,
	@SELF_CCW,
} @self_state_t;

typedef enum {
	@SELF_UNKNOWN,
	@SELF_BACK,
	@SELF_FRONT,
} @self_location_t;

//this number is equivalent to off time of duty cycle, on time is always 16ms
#define @SELF_DUTY_100 0
#define @SELF_DUTY_50  TIME_16MS
#define @SELF_DUTY_25  TIME_50MS
#define @SELF_DUTY_10  TIME_166MS

extern __fastram__ @self_state_t @self_state;
extern __fastram__ U8 @self_timer;
extern  @self_location_t @self_location;
extern U8 @self_speed;

/* User APIs */
void @self_go_cw_front (void);
void @self_go_ccw_front (void);
void @self_go_cw_back (void);
void @self_go_ccw_back (void);
void @self_set_speed (U8 speed);
void @self_stop (void);
void @self_bump_ccw (void);
void @self_bump_cw (void);
void @self_go_cw_loop (void);
void @self_go_ccw_loop (void);




extern inline void @self_stop_from_interrupt (void) {
	@self_state = @SELF_IDLE;
	sol_disable(@dir_sol);
	sol_disable(@enable_sol);
}


extern inline void @self_set_speed (U8 speed) { @self_speed = speed; }

extern inline U8 @self_get_speed (void) { return @self_speed; }

extern inline @self_state_t @self_get_state (void) { return @self_state; }

extern inline @self_location_t @self_get_location (void) { return @self_location; }

/**
 * Realtime update of a duty-cycled device.
 */
/* RTT(name=@self_service freq=16) */
extern inline void @self_service (void) {
	/* Only act if device is enabled */
	if (@self_state != @SELF_IDLE) {
		if (@self_timer == 0) {
			/* Motor was enabled for 1 tick.  We need to
			turn it off, and restart the off delay. */
			if (@self_speed == 0)
				;
			else
			{
				sol_disable (@enable_sol);
				sol_disable (@dir_sol);
			}
			@self_timer = @self_speed;
		}
		else if (--@self_timer == 0) {
			/* We are in off delay, if timer reaches zero,
			then turn it back on. */
			if (@self_state == @SELF_CCW_TO_FRONT || @self_state == @SELF_CCW_TO_BACK || @self_state == @SELF_CCW)
			{
				sol_enable (@enable_sol);
			}
			else
			{
				sol_enable (@dir_sol);
				sol_enable (@enable_sol);
			}
		}
	}
}








@@
@@file @self.c
@@

#include <freewpc.h>
#include "@self.h"

__fastram__ @self_state_t @self_state;
__fastram__ U8 @self_timer;
@self_location_t @self_location;
U8 @self_speed;


void @self_go_cw_front (void) {
	if (@self_location != @SELF_FRONT)
	{ 
		disable_interrupts ();
		@self_timer = 1;
		@self_state = @SELF_CCW_TO_FRONT;
		@self_location = @SELF_UNKNOWN;
		sol_disable (@dir_sol);
		sol_disable (@enable_sol);
		enable_interrupts ();
	}
}

void @self_go_ccw_front (void) {
	if (@self_location != @SELF_FRONT)
	{ 
		disable_interrupts ();
		@self_timer = 1;
		@self_state = @SELF_CW_TO_FRONT;
		@self_location = @SELF_UNKNOWN;
		sol_disable (@dir_sol);
		sol_disable (@enable_sol);
		enable_interrupts ();
	}
}

void @self_go_cw_back (void) {
	if (@self_location != @SELF_BACK)
	{ 
		disable_interrupts ();
		@self_timer = 1;
		@self_state = @SELF_CCW_TO_BACK;
		@self_location = @SELF_UNKNOWN;
		sol_disable (@dir_sol);
		sol_disable (@enable_sol);
		enable_interrupts ();
	}
}

void @self_go_ccw_back (void) {
	if (@self_location != @SELF_BACK)
	{ 
		disable_interrupts ();
		@self_timer = 1;
		@self_state = @SELF_CW_TO_BACK;
		@self_location = @SELF_UNKNOWN;
		sol_disable (@dir_sol);
		sol_disable (@enable_sol);
		enable_interrupts ();
	}
}

void @self_go_cw_loop (void) {
	disable_interrupts ();
	@self_timer = 1;
	@self_state = @SELF_CW;
	@self_location = @SELF_UNKNOWN;
	sol_disable (@dir_sol);
	sol_disable (@enable_sol);
	enable_interrupts ();
}

void @self_go_ccw_loop (void) {
	disable_interrupts ();
	@self_timer = 1;
	@self_state = @SELF_CCW;
	@self_location = @SELF_UNKNOWN;
	sol_disable (@dir_sol);
	sol_disable (@enable_sol);
	enable_interrupts ();
}

void @self_stop (void) {
	disable_interrupts ();
	@self_stop_from_interrupt ();
	enable_interrupts ();
	@self_state = @SELF_IDLE;
	sol_disable (@enable_sol);
	sol_disable (@dir_sol);
}


CALLSET_ENTRY (@self, @back_sw) {
	if (@self_state == @SELF_CW_TO_BACK || @self_state == @SELF_CCW_TO_BACK)
	{
		@self_stop (); 
		@self_location = @SELF_BACK;
	}
}

CALLSET_ENTRY (@self, @front_sw) {
	if (@self_state == @SELF_CW_TO_FRONT || @self_state == @SELF_CCW_TO_FRONT)
	{
		@self_stop (); 
		@self_location = @SELF_FRONT;
	}
}

void @self_bump_monitor (void) {
//	task_sleep(TIME_16MS);
	task_sleep(TIME_100MS);
	@self_stop (); 
	task_exit ();
}


void @self_bump_ccw (void) {
	disable_interrupts ();
	@self_timer = 1;
	@self_state = @SELF_CCW;
	@self_location = @SELF_UNKNOWN;
	sol_enable (@dir_sol);
	sol_enable (@enable_sol);
	task_recreate_gid (GID_@SELF_B_MONITOR, @self_bump_monitor);
	enable_interrupts ();
}

void @self_bump_cw (void) {
	disable_interrupts ();
	@self_timer = 1;
	@self_state = @SELF_CW;
	@self_location = @SELF_UNKNOWN;
	sol_disable (@dir_sol);
	sol_enable (@enable_sol);
	task_recreate_gid (GID_@SELF_B_MONITOR, @self_bump_monitor);
	enable_interrupts ();
}

CALLSET_ENTRY (@self, init) {
	@self_state = @SELF_IDLE;
	@self_location = @SELF_UNKNOWN;
	@self_set_speed (@SELF_DUTY_100);
}

CALLSET_ENTRY (@self, tilt, stop_game, test_start) {
	@self_state = @SELF_IDLE;
	@self_location = @SELF_UNKNOWN;
	@self_stop ();
}












@@
@@file @self_test.c
@@

 
/***********************************************************************
 * @self test:
 ***********************************************************************/
 

#include <freewpc.h>
#include <window.h>
#include <test.h>
#include "@self.h"

#define FRSR_WORKAROUND 1

enum {
FIRST_TEST = 0,
CCW = FIRST_TEST,
CW,
STOP,
LAST_TEST = STOP
} @self_test_command;



char *@self_test_short_names[] = {
"CCW",
"CW",
"STOP"
};

extern  @self_location_t @self_location;





void @self_test_draw (void) {
dmd_alloc_low_clean ();
//draw title
font_render_string_center (&font_var5, 64, 2, "@SELF TEST");
dmd_draw_horiz_line ((U16 *)dmd_low_buffer, 5);
dmd_draw_horiz_line ((U16 *)dmd_low_buffer, 25);


//display status of face optos
font_render_string_center (&font_var5, 8, 13, "FACE");
if (@self_location == 1) 
	sprintf ("BACK X");
else
	sprintf ("BACK O");
font_render_string_center (&font_var5, 50, 13, sprintf_buffer);

if (@self_location == 2) 
	sprintf ("FRONT X");
else
	sprintf ("FRONT O");
font_render_string_center (&font_var5, 94, 13, sprintf_buffer);

//name of currently running test
sprintf(@self_test_short_names[@self_test_command]);
font_render_string_left (&font_var5, 0, 27, sprintf_buffer);

dmd_show_low ();
}


void @self_test_init (void) { 
//	global_flag_off(GLOBAL_FLAG_IS_BFHEAD_BACK); //turn off claw in home flag so that it is fixed when exiting
	@self_test_command = STOP; 
	if (switch_poll_logical (@back_sw) ) @self_location = @SELF_BACK;
	if (switch_poll_logical (@front_sw) ) @self_location = @SELF_FRONT;
}


void @self_test_thread (void) {
	for (;;) {
		task_sleep (TIME_1S);//this was set to run faster but seemed to cause problems
		@self_test_draw ();
	}
}

//up test button pressed
void @self_test_up (void) {
	if (@self_test_command < LAST_TEST)
		@self_test_command++;
}

//down test button pressed
void @self_test_down (void) {
	if (@self_test_command > FIRST_TEST)
		@self_test_command--;
}

//escape test button pressed
void @self_test_escape (void) {
	// stop everything
	@self_stop();
	window_pop();
}



//enter test button pressed
void @self_test_enter (void) {
	sound_send (SND_TEST_ENTER);
	switch (@self_test_command) {
		case CCW:
				if (@self_location != @SELF_BACK) @self_go_ccw_loop();
			@self_test_command = STOP;
		break;
		case CW:
			if (@self_location != @SELF_FRONT) @self_go_cw_loop();
			@self_test_command = STOP;
		break;
		case STOP:
			@self_stop();
			@self_test_command = STOP;
		break;
	}
}

struct window_ops @self_test_window = {
	DEFAULT_WINDOW,
	.init = @self_test_init,
	.draw = @self_test_draw,
	.up = @self_test_up,
	.down = @self_test_down,
	.enter = @self_test_enter,
	.escape = @self_test_escape,
	.thread = @self_test_thread,
};


struct menu @self_test_item = {
	.name = "@SELF TEST", // needs @SELF for uppercase version of 'self' as test menu font doesn't have lower-case letters.
	.flags = M_ITEM,
	.var = { .subwindow = { &@self_test_window, NULL } },
};




